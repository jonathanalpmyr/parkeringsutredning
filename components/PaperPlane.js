/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 scene.gltf 
Author: SH3D | KUB (https://sketchfab.com/itskub)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/other-origami-paper-plane-animation-4a773f039eb54db0a78fce8bfdea66ec
Title: #Other - Origami Paper Plane Animation
*/

import { useGSAP } from "@gsap/react"
import { Float, useAnimations, useGLTF, useTexture } from "@react-three/drei"
import gsap from "gsap"
import ScrollTrigger from "gsap/dist/ScrollTrigger"
import { useEffect, useRef, useState } from "react"
import Rotate from "./Rotate"
gsap.registerPlugin(ScrollTrigger)

export default function PaperPlane({ animated, ...props }) {
  const group = useRef()
  const planeRef = useRef()
  const tlRef = useRef()
  const tl2Ref = useRef()

  const [disableRotate, setDisableRotate] = useState(false)

  const { nodes, materials, animations } = useGLTF("/paper-plane/scene.gltf")
  const { actions, mixer } = useAnimations(animations, group)

  const texture = useTexture("/document.jpg")

  useEffect(() => {
    if (actions && animated) {
      actions[Object.keys(actions)].play()
      actions[Object.keys(actions)].reset().paused = true // Pause and reset the animation
    }
  }, [actions])

  useEffect(() => {
    if (actions && animated) {
      //   console.log(actions)
      tlRef.current = gsap.timeline({
        scrollTrigger: {
          trigger: ".features-grid",
          endTrigger: ".features",
          start: "bottom 70%",
          end: "bottom+=10% bottom",
          scrub: true,
          onUpdate: (self) => {
            if (actions[Object.keys(actions)]) {
              actions[Object.keys(actions)].time =
                actions[Object.keys(actions)].getClip().duration * self.progress
            }
          },
        },
      })
    }
  }, [actions])

  useEffect(() => {
    if (tlRef.current && animated) {
      tlRef.current.to(group.current.rotation, {
        y: Math.PI * 0.05,
        duration: 2,
        ease: "expo.out",
        //   onUpdate: (self) => {
        //     actions[Object.keys(actions)].time =
        //       actions[Object.keys(actions)].getClip().duration * self.progress
        //   },
      })
    }
  }, [tlRef])

  // Paper plane animation
  useGSAP(() => {
    if (!planeRef.current) return

    tl2Ref.current = gsap.timeline({
      scrollTrigger: {
        trigger: document.body,
        endTrigger: ".documents-container",
        start: "top top",
        end: "20% bottom",
        scrub: 1,
        onToggle: (e) => {
          setDisableRotate(true)
        },
      },
      defaults: {
        ease: "none",
      },
    })

    tl2Ref.current.fromTo(
      planeRef.current.position,
      {
        x: 1.3,
        y: 0.25,
      },
      {
        x: 0,
        y: 0,
        ease: "expo.out",
      },
      "0"
    )

    tl2Ref.current.fromTo(
      planeRef.current.scale,
      {
        x: 0.5,
        y: 0.7,
        z: 0.7,
      },
      {
        x: 1,
        y: 1,
        z: 1,
        ease: "expo.out",
      },
      "0"
    )

    tl2Ref.current.fromTo(
      planeRef.current.rotation,
      {
        x: -0.7,
        y: -0.7,
        z: -0.7,
      },
      {
        x: 0,
        y: 0,
        z: 0,
        ease: "none",
      },
      "0"
    )
  }, [planeRef])

  useEffect(() => {
    if (planeRef.current) {
      planeRef.current.renderOrder = 9999
    }
  }, [])

  return (
    <group ref={planeRef}>
      <Rotate disableRotate={disableRotate}>
        <group ref={group} {...props} dispose={null}>
          <group name="Sketchfab_Scene">
            <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
              <group
                name="db31335ecae34cafa815c00c98eb0652fbx"
                rotation={[Math.PI / 2, 0, 0]}
              >
                <group name="Object_2">
                  <group name="RootNode">
                    <group name="Plane004">
                      <mesh
                        name="0"
                        geometry={nodes["0"].geometry}
                        material={materials.Material_2}
                        material-map={texture}
                        morphTargetDictionary={nodes["0"].morphTargetDictionary}
                        morphTargetInfluences={nodes["0"].morphTargetInfluences}
                      />
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </Rotate>
    </group>
  )
}

useGLTF.preload("/paper-plane/scene.gltf")
